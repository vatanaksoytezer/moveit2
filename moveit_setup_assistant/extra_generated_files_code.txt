  // ompl_planning.yaml --------------------------------------------------------------------------------------
  file.file_name_ = "ompl_planning.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  file.description_ = "Configures the OMPL (<a href='http://ompl.kavrakilab.org/'>Open Motion Planning Library</a>) "
                      "planning plugin. For every planning group defined in the SRDF, a number of planning "
                      "configurations are specified (under planner_configs). Additionally, default settings for the "
                      "state space to plan in for a particular group can be specified, such as the collision checking "
                      "resolution. Each planning configuration specified for a group must be defined under the "
                      "planner_configs tag. While defining a planner configuration, the only mandatory parameter is "
                      "'type', which is the name of the motion planner to be used. Any other planner-specific "
                      "parameters can be defined but are optional.";
  file.gen_func_ = boost::bind(&MoveItConfigData::outputOMPLPlanningYAML, config_data_, _1);
  file.write_on_changes = MoveItConfigData::GROUPS;

  // chomp_planning.yaml  --------------------------------------------------------------------------------------
  file.file_name_ = "chomp_planning.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  file.description_ = "Specifies which chomp planning plugin parameters to be used for the CHOMP planner";
  file.gen_func_ = boost::bind(&MoveItConfigData::outputCHOMPPlanningYAML, config_data_, _1);
  file.write_on_changes = MoveItConfigData::GROUPS;  // need to double check if this is actually correct!

  // kinematics.yaml  --------------------------------------------------------------------------------------
  file.file_name_ = "kinematics.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  file.description_ = "Specifies which kinematic solver plugin to use for each planning group in the SRDF, as well as "
                      "the kinematic solver search resolution.";
  file.gen_func_ = boost::bind(&MoveItConfigData::outputKinematicsYAML, config_data_, _1);
  file.write_on_changes = MoveItConfigData::GROUPS | MoveItConfigData::GROUP_KINEMATICS;

  // joint_limits.yaml --------------------------------------------------------------------------------------
  file.file_name_ = "joint_limits.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  file.description_ = "Contains additional information about joints that appear in your planning groups that is not "
                      "contained in the URDF, as well as allowing you to set maximum and minimum limits for velocity "
                      "and acceleration than those contained in your URDF. This information is used by our trajectory "
                      "filtering system to assign reasonable velocities and timing for the trajectory before it is "
                      "passed to the robots controllers.";
  file.gen_func_ = boost::bind(&MoveItConfigData::outputJointLimitsYAML, config_data_, _1);
  file.write_on_changes = 0;  // Can they be changed?

  // cartesian_limits.yaml --------------------------------------------------------------------------------------
  file.file_name_ = "cartesian_limits.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  template_path = config_data_->appendPaths(config_data_->template_package_path_, file.rel_path_);
  file.description_ = "Cartesian velocity for planning in the workspace."
                      "The velocity is used by pilz industrial motion planner as maximum velocity for cartesian "
                      "planning requests scaled by the velocity scaling factor of an individual planning request.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);
  file.write_on_changes = 0;  // Can they be changed?

  // fake_controllers.yaml --------------------------------------------------------------------------------------
  file.file_name_ = "fake_controllers.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  file.description_ = "Creates dummy configurations for controllers that correspond to defined groups. This is mostly "
                      "useful for testing.";
  file.gen_func_ = boost::bind(&MoveItConfigData::outputFakeControllersYAML, config_data_, _1);
  file.write_on_changes = MoveItConfigData::GROUPS;

  // ros_controllers.yaml --------------------------------------------------------------------------------------
  file.file_name_ = "ros_controllers.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  file.description_ = "Creates configurations for ros_controllers.";
  file.gen_func_ = boost::bind(&MoveItConfigData::outputROSControllersYAML, config_data_, _1);
  file.write_on_changes = MoveItConfigData::GROUPS;

  // sensors_3d.yaml --------------------------------------------------------------------------------------
  file.file_name_ = "sensors_3d.yaml";
  file.rel_path_ = config_data_->appendPaths(config_path, file.file_name_);
  file.description_ = "Creates configurations 3d sensors.";
  file.gen_func_ = boost::bind(&MoveItConfigData::output3DSensorPluginYAML, config_data_, _1);
  file.write_on_changes = MoveItConfigData::SENSORS_CONFIG;

  // -------------------------------------------------------------------------------------------------------------------
  // LAUNCH FILES ------------------------------------------------------------------------------------------------------
  // -------------------------------------------------------------------------------------------------------------------
  std::string launch_path = "launch";
  const std::string template_launch_path = config_data_->appendPaths(config_data_->template_package_path_, launch_path);

  // move_group.launch --------------------------------------------------------------------------------------
  file.file_name_ = "move_group.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Launches the move_group node that provides the MoveGroup action and other parameters <a "
                      "href='http://moveit.ros.org/doxygen/"
                      "classmoveit_1_1planning__interface_1_1MoveGroup.html#details'>MoveGroup action</a>";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // planning_context.launch --------------------------------------------------------------------------------------
  file.file_name_ = "planning_context.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Loads settings for the ROS parameter server, required for running MoveIt. This includes the "
                      "SRDF, joints_limits.yaml file, ompl_planning.yaml file, optionally the URDF, etc";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // moveit_rviz.launch --------------------------------------------------------------------------------------
  file.file_name_ = "moveit_rviz.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Visualize in Rviz the robot's planning groups running with interactive markers that allow goal "
                      "states to be set.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // ompl_planning_pipeline.launch
  // --------------------------------------------------------------------------------------
  file.file_name_ = "ompl_planning_pipeline.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Intended to be included in other launch files that require the OMPL planning plugin. Defines "
                      "the proper plugin name on the parameter server and a default selection of planning request "
                      "adapters.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // pilz_industrial_motion_planner_planning_pipeline.launch
  // --------------------------------------------------------------------------------------
  file.file_name_ = "pilz_industrial_motion_planner_planning_pipeline.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Intended to be included in other launch files that require the Pilz industrial motion planner "
                      "planning plugin. Defines the proper plugin name on the parameter server and a default selection "
                      "of planning request adapters.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // chomp_planning_pipeline.launch
  // --------------------------------------------------------------------------------------
  file.file_name_ = "chomp_planning_pipeline.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Intended to be included in other launch files that require the CHOMP planning plugin. Defines "
                      "the proper plugin name on the parameter server and a default selection of planning request "
                      "adapters.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // planning_pipeline.launch --------------------------------------------------------------------------------------
  file.file_name_ = "planning_pipeline.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Helper launch file that can choose between different planning pipelines to be loaded.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // warehouse_settings.launch --------------------------------------------------------------------------------------
  file.file_name_ = "warehouse_settings.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Helper launch file that specifies default settings for MongoDB.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // warehouse.launch --------------------------------------------------------------------------------------
  file.file_name_ = "warehouse.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Launch file for starting MongoDB.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // default_warehouse_db.launch --------------------------------------------------------------------------------------
  file.file_name_ = "default_warehouse_db.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Launch file for starting the warehouse with a default MongoDB.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // run_benchmark_ompl.launch --------------------------------------------------------------------------------------
  file.file_name_ = "run_benchmark_ompl.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Launch file for benchmarking OMPL planners";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // sensor_manager.launch --------------------------------------------------------------------------------------
  file.file_name_ = "sensor_manager.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Helper launch file that can choose between different sensor managers to be loaded.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // robot_moveit_controller_manager.launch ------------------------------------------------------------------
  file.file_name_ = robot_name + "_moveit_controller_manager.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, "moveit_controller_manager.launch.xml");
  file.description_ = "Placeholder for settings specific to the MoveIt controller manager implemented for you robot.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // robot_moveit_sensor_manager.launch ------------------------------------------------------------------
  file.file_name_ = robot_name + "_moveit_sensor_manager.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, "moveit_sensor_manager.launch.xml");
  file.description_ = "Placeholder for settings specific to the MoveIt sensor manager implemented for you robot.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // trajectory_execution.launch ------------------------------------------------------------------
  file.file_name_ = "trajectory_execution.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Loads settings for the ROS parameter server required for executing trajectories using the "
                      "trajectory_execution_manager::TrajectoryExecutionManager.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);
  gen_files_.push_back(
      file);  // trajectory_execution.launch ------------------------------------------------------------------

  file.file_name_ = "fake_moveit_controller_manager.launch.xml";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Loads a fake controller plugin.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // demo.launch ------------------------------------------------------------------
  file.file_name_ = "demo.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Run a demo of MoveIt.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // gazebo.launch ------------------------------------------------------------------
  file.file_name_ = "gazebo.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, "gazebo.launch");
  file.description_ = "Gazebo launch file which also launches ros_controllers and sends robot urdf to param server, "
                      "then using gazebo_ros pkg the robot is spawned to Gazebo";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // demo_gazebo.launch ------------------------------------------------------------------
  file.file_name_ = "demo_gazebo.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Run a demo of MoveIt with Gazebo and Rviz";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // joystick_control.launch ------------------------------------------------------------------
  file.file_name_ = "joystick_control.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, file.file_name_);
  file.description_ = "Control the Rviz Motion Planning Plugin with a joystick";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // setup_assistant.launch ------------------------------------------------------------------
  file.file_name_ = "setup_assistant.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(
      template_launch_path, "edit_configuration_package.launch");  // named this so that this launch file is not mixed
                                                                   // up with the SA's real launch file
  file.description_ = "Launch file for easily re-starting the MoveIt Setup Assistant to edit this robot's generated "
                      "configuration package.";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);

  // ros_controllers.launch ------------------------------------------------------------------
  file.file_name_ = "ros_controllers.launch";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, "ros_controllers.launch");
  file.description_ = "ros_controllers launch file";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);
  file.write_on_changes = MoveItConfigData::GROUPS;

  // moveit.rviz ------------------------------------------------------------------
  file.file_name_ = "moveit.rviz";
  file.rel_path_ = config_data_->appendPaths(launch_path, file.file_name_);
  template_path = config_data_->appendPaths(template_launch_path, "moveit.rviz");
  file.description_ = "Configuration file for Rviz with the Motion Planning Plugin already setup. Used by passing "
                      "roslaunch moveit_rviz.launch config:=true";
  file.gen_func_ = boost::bind(&ConfigurationFilesWidget::copyTemplate, this, template_path, _1);
